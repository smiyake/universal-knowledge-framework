[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "universal-knowledge-framework"
version = "1.0.0"
description = "A universal document management system with Claude-Obsidian integration"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Universal Knowledge Framework Team", email = "contact@universalknowledge.dev"},
]
keywords = ["documentation", "knowledge-management", "obsidian", "claude", "productivity"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Office/Business :: Scheduling",
    "Topic :: Documentation",
    "Topic :: Text Processing :: Markup",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "jinja2>=3.0.0",
    "rich>=12.0.0",
    "watchdog>=2.1.0",
    "gitpython>=3.1.0",
    "python-frontmatter>=1.0.0",
    "markdown>=3.4.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]

[project.urls]
Homepage = "https://github.com/universal-knowledge-framework/universal-knowledge-framework"
Documentation = "https://universal-knowledge-framework.readthedocs.io/"
Repository = "https://github.com/universal-knowledge-framework/universal-knowledge-framework"
Issues = "https://github.com/universal-knowledge-framework/universal-knowledge-framework/issues"

[project.scripts]
ukf = "universal_knowledge_framework.cli:main"
universal-knowledge = "universal_knowledge_framework.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
universal_knowledge_framework = ["templates/**/*", "assets/**/*", "schemas/**/*"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]